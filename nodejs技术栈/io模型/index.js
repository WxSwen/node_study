// I/O 多路复用有多种实现模式：select、poll、epoll、kqueue
//  I/O 通常指网络 I/O，多路指多个 Socket 链接，复用指操作系统进行运算调度的最小单位线程。
// 整体意思也就是多个网络 I/O 复用一个或少量的线程来处理 Socket。

// select 
// select 的轮询相当于在数据库中查找一条记录没有建立索引，对所有的 socket 进行全部遍历，这对 CPU 是浪费的。另外 select 还有一个限制，对于单个进程所能打开的文件描述符最大只能是 1024，那么基于 select 的轮询技术最多也只能很好的处理 1000 并发的吞吐量
// poll
// poll 基于链表来实现，没有了最大链接 1024 的限制。但是当文件描述符多了之后，每次调用都会对链接进行线性遍历，性能还是十分低下的
// epoll
// 是 linux 下效率最高的 I/O 事件通知机制，没有最大链接限制，通过 callbak 回调通知机制，不在是每次调用都对链接进行线性遍历，这样就不会随着文件描述符的增加导致效率下降。
// kqueue
// 与 epoll 类似，仅存于 FreeBSD


// 异步io
// 异步 I/O 模型是目前最理想的一种形式，应用程序发起系统调用后无需等待直接返回当前调用状态，进行后续的其它任务，结果由内核完成 I/O 操作之后通过回调通知到我们的应用程序，中间没有阻塞过程。



// select/epoll 对比
// 1. 在操作方式上区别
// select 线性查找，在数组中寻找一个数
// epoll 是回调机制，相当于hashtable查找
// 2. 文件描述符限制
// select 1024
// epoll 无限制
// 3. 操作系统
// 目前流行的高性能 Web 服务器 Nginx 是基于 epoll 来实现高并


